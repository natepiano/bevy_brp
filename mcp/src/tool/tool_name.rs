//! Tool constants and descriptions for the Bevy BRP MCP server.
//!
//! This module consolidates all tool names, descriptions, and help text for the MCP server.
//! It provides a single source of truth for all tool-related constants.

use std::sync::Arc;

use bevy_brp_mcp_macros::{BrpTools, ToolDescription};
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use strum::{AsRefStr, Display, EnumIter, EnumString, IntoStaticStr};

use super::annotations::{Annotation, EnvironmentImpact, ToolCategory};
use super::types::ErasedToolFn;
use super::{ToolDef, parameters};
use crate::app_tools::{
    self, LaunchBevyBinaryParams, ListBevyApps, ListBevyExamples, ListBrpApps, Shutdown,
    ShutdownParams, Status, StatusParams,
};
// Import special tools that aren't generated by the macro
// Import parameter and result types so they're in scope for the macro
use crate::brp_tools::{
    AllTypeGuidesParams, BevyListWatch, BrpAllTypeGuides, BrpExecute, BrpListActiveWatches,
    BrpStopWatch, BrpTypeGuide, DespawnEntityParams, DespawnEntityResult, ExecuteParams,
    GetComponentsParams, GetComponentsResult, GetComponentsWatchParams, GetResourcesParams,
    GetResourcesResult, InsertComponentsParams, InsertComponentsResult, InsertResourcesParams,
    InsertResourcesResult, ListComponentsParams, ListComponentsResult, ListComponentsWatchParams,
    ListResourcesParams, ListResourcesResult, MutateComponentsParams, MutateComponentsResult,
    MutateResourcesParams, MutateResourcesResult, QueryParams, QueryResult, RegistrySchemaParams,
    RegistrySchemaResult, RemoveComponentsParams, RemoveComponentsResult, RemoveResourcesParams,
    RemoveResourcesResult, ReparentEntitiesParams, ReparentEntitiesResult, RpcDiscoverParams,
    RpcDiscoverResult, ScreenshotParams, ScreenshotResult, SendKeysParams, SendKeysResult,
    SetWindowTitleParams, SetWindowTitleResult, SpawnEntityParams, SpawnEntityResult,
    StopWatchParams, TypeGuideParams, WorldGetComponentsWatch,
};
use crate::log_tools::{
    DeleteLogs, DeleteLogsParams, GetTraceLogPath, ListLogs, ListLogsParams, ReadLog,
    ReadLogParams, SetTracingLevel, SetTracingLevelParams,
};

/// Call information for tracking tool execution
#[derive(Debug, Clone, Serialize, Deserialize, JsonSchema)]
#[serde(untagged)]
pub enum CallInfo {
    /// Local tool execution (no BRP involved)
    Local {
        /// The MCP tool name (e.g., `brp_status`)
        mcp_tool: String,
    },
    /// BRP tool execution (calls Bevy Remote Protocol)
    Brp {
        /// The MCP tool name (e.g., `world_spawn_entity`)
        mcp_tool:   String,
        /// The BRP method name (e.g., `world.spawn_entity`)
        brp_method: String,
    },
}

impl CallInfo {
    /// Create `CallInfo` for a local tool
    pub const fn local(mcp_tool: String) -> Self {
        Self::Local { mcp_tool }
    }

    /// Create `CallInfo` for a BRP tool
    pub const fn brp(mcp_tool: String, brp_method: String) -> Self {
        Self::Brp {
            mcp_tool,
            brp_method,
        }
    }
}

/// Tool names enum with automatic `snake_case` serialization
#[derive(
    AsRefStr,
    BrpTools,
    Clone,
    Copy,
    Debug,
    Display,
    EnumIter,
    EnumString,
    Eq,
    IntoStaticStr,
    PartialEq,
    ToolDescription,
)]
#[strum(serialize_all = "snake_case")]
#[tool_description(path = "../../help_text")]
pub enum ToolName {
    // Core BRP Tools (Direct protocol methods)
    /// `world_list_components` - List components on an entity or all component types
    #[brp_tool(
        brp_method = "world.list_components",
        params = "ListComponentsParams",
        result = "ListComponentsResult"
    )]
    WorldListComponents,
    /// `world_get_components` - Get component data from entities
    #[brp_tool(
        brp_method = "world.get_components",
        params = "GetComponentsParams",
        result = "GetComponentsResult"
    )]
    WorldGetComponents,
    /// `world_despawn_entity` - Despawns entities permanently
    #[brp_tool(
        brp_method = "world.despawn_entity",
        params = "DespawnEntityParams",
        result = "DespawnEntityResult"
    )]
    WorldDespawnEntity,
    /// `world_insert_components` - Insert or replace components on entities
    #[brp_tool(
        brp_method = "world.insert_components",
        params = "InsertComponentsParams",
        result = "InsertComponentsResult"
    )]
    WorldInsertComponents,
    /// `world_remove_components` - Remove components from entities
    #[brp_tool(
        brp_method = "world.remove_components",
        params = "RemoveComponentsParams",
        result = "RemoveComponentsResult"
    )]
    WorldRemoveComponents,
    /// `world_list_resources` - List all registered resources
    #[brp_tool(
        brp_method = "world.list_resources",
        params = "ListResourcesParams",
        result = "ListResourcesResult"
    )]
    WorldListResources,
    /// `world_get_resources` - Get resource data
    #[brp_tool(
        brp_method = "world.get_resources",
        params = "GetResourcesParams",
        result = "GetResourcesResult"
    )]
    WorldGetResources,
    /// `world_insert_resources` - Insert or update resources
    #[brp_tool(
        brp_method = "world.insert_resources",
        params = "InsertResourcesParams",
        result = "InsertResourcesResult"
    )]
    WorldInsertResources,
    /// `world_remove_resources` - Remove resources
    #[brp_tool(
        brp_method = "world.remove_resources",
        params = "RemoveResourcesParams",
        result = "RemoveResourcesResult"
    )]
    WorldRemoveResources,
    /// `bevy_mutate_resources` - Mutate resource fields
    #[brp_tool(
        brp_method = "world.mutate_resources",
        params = "MutateResourcesParams",
        result = "MutateResourcesResult"
    )]
    WorldMutateResources,

    /// `world_mutate_components` - Mutate component fields
    #[brp_tool(
        brp_method = "world.mutate_components",
        params = "MutateComponentsParams",
        result = "MutateComponentsResult"
    )]
    WorldMutateComponents,
    /// `bevy_rpc_discover` - Discover available BRP methods
    #[brp_tool(
        brp_method = "rpc.discover",
        params = "RpcDiscoverParams",
        result = "RpcDiscoverResult"
    )]
    RpcDiscover,
    /// `world_query` - Query entities by components
    #[brp_tool(
        brp_method = "world.query",
        params = "QueryParams",
        result = "QueryResult"
    )]
    WorldQuery,
    /// `world_spawn_entity` - Spawn entities with components
    #[brp_tool(
        brp_method = "world.spawn_entity",
        params = "SpawnEntityParams",
        result = "SpawnEntityResult"
    )]
    WorldSpawnEntity,
    /// `registry_schema` - Get type schemas
    #[brp_tool(
        brp_method = "registry.schema",
        params = "RegistrySchemaParams",
        result = "RegistrySchemaResult"
    )]
    RegistrySchema,

    /// `world_reparent_entities` - Change entity parents
    #[brp_tool(
        brp_method = "world.reparent_entities",
        params = "ReparentEntitiesParams",
        result = "ReparentEntitiesResult"
    )]
    WorldReparentEntities,
    /// `world_get_components_watch` - Watch entity component changes
    #[brp_tool(brp_method = "world.get_components+watch")]
    WorldGetComponentsWatch,
    /// `world_list_components_watch` - Watch entity component list changes
    #[brp_tool(brp_method = "world.list_components+watch")]
    WorldListComponentsWatch,

    // BRP Execute Tool
    /// `brp_execute` - Execute arbitrary BRP method
    BrpExecute,

    // BRP Extras Tools
    /// `brp_extras_screenshot` - Capture screenshots
    #[brp_tool(
        brp_method = "brp_extras/screenshot",
        params = "ScreenshotParams",
        result = "ScreenshotResult"
    )]
    BrpExtrasScreenshot,
    /// `brp_extras_send_keys` - Send keyboard input
    #[brp_tool(
        brp_method = "brp_extras/send_keys",
        params = "SendKeysParams",
        result = "SendKeysResult"
    )]
    BrpExtrasSendKeys,
    /// `brp_extras_set_window_title` - Change window title
    #[brp_tool(
        brp_method = "brp_extras/set_window_title",
        params = "SetWindowTitleParams",
        result = "SetWindowTitleResult"
    )]
    BrpExtrasSetWindowTitle,

    // BRP Watch Assist Tools
    /// `brp_stop_watch` - Stop active watch subscriptions
    BrpStopWatch,
    /// `brp_list_active_watches` - List active watch subscriptions
    BrpListActiveWatches,

    // Application Management Tools
    /// `brp_list_bevy_apps` - List Bevy apps in workspace
    BrpListBevyApps,
    /// `brp_list_bevy_examples` - List Bevy examples in workspace
    BrpListBevyExamples,
    /// `brp_list_brp_apps` - List BRP-enabled Bevy apps
    BrpListBrpApps,
    /// `brp_launch_bevy_app` - Launch Bevy applications
    BrpLaunchBevyApp,
    /// `brp_launch_bevy_example` - Launch Bevy examples
    BrpLaunchBevyExample,
    /// `brp_shutdown` - Shutdown running Bevy applications
    #[brp_tool(brp_method = "brp_extras/shutdown")]
    BrpShutdown,
    /// `brp_status` - Check if Bevy app is running with BRP
    BrpStatus,

    // Log Management Tools
    /// `brp_list_logs` - List `bevy_brp_mcp` log files
    BrpListLogs,
    /// `brp_read_log` - Read `bevy_brp_mcp` log file contents
    BrpReadLog,
    /// `brp_delete_logs` - Delete `bevy_brp_mcp` log files
    BrpDeleteLogs,
    /// `brp_get_trace_log_path` - Get trace log path
    BrpGetTraceLogPath,
    /// `brp_set_tracing_level` - Set tracing level
    BrpSetTracingLevel,

    // Type Schema - In a class of its own
    /// `brp_type_guide` - type schema discovery
    BrpTypeGuide,
    /// `brp_all_type_guides` - Get type guides for all registered types
    BrpAllTypeGuides,
}

impl ToolName {
    /// Get call info for this tool
    ///
    /// This method creates the appropriate `CallInfo` variant based on the tool type:
    /// - BRP tools get `CallInfo::Brp`
    /// - Non-BRP tools get `CallInfo::Local`
    pub fn get_call_info(self) -> CallInfo {
        let tool_name = self.to_string();
        match self.to_brp_method() {
            Some(brp_method) => CallInfo::Brp {
                mcp_tool:   tool_name,
                brp_method: brp_method.as_str().to_string(),
            },
            None => CallInfo::Local {
                mcp_tool: tool_name,
            },
        }
    }

    /// Get annotations for this tool - the annotations will show up in the
    /// mcp tool rather than the raw tool name. Makes it more human-readable as well as
    /// coding agent readable.
    ///
    /// so many ways to construct the annotations. this is one of those ways.
    #[allow(clippy::too_many_lines)]
    pub fn get_annotations(self) -> Annotation {
        match self {
            Self::WorldDespawnEntity => Annotation::new(
                "Despawn Bevy Entity",
                ToolCategory::Entity,
                EnvironmentImpact::DestructiveIdempotent,
            ),
            Self::WorldGetComponents => Annotation::new(
                "Get Component Data",
                ToolCategory::Component,
                EnvironmentImpact::ReadOnly,
            ),
            Self::WorldGetResources => Annotation::new(
                "Get Resource Data",
                ToolCategory::Resource,
                EnvironmentImpact::ReadOnly,
            ),
            Self::WorldInsertComponents => Annotation::new(
                "Insert Components",
                ToolCategory::Component,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            Self::WorldInsertResources => Annotation::new(
                "Insert Resources",
                ToolCategory::Resource,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            Self::WorldListComponents => Annotation::new(
                "List Components",
                ToolCategory::Component,
                EnvironmentImpact::ReadOnly,
            ),
            Self::WorldListResources => Annotation::new(
                "List Resources",
                ToolCategory::Resource,
                EnvironmentImpact::ReadOnly,
            ),
            Self::WorldMutateComponents => Annotation::new(
                "Mutate Components",
                ToolCategory::Component,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            Self::WorldMutateResources => Annotation::new(
                "Mutate Resources",
                ToolCategory::Resource,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            Self::WorldQuery => Annotation::new(
                "Query Entities/Components",
                ToolCategory::Component,
                EnvironmentImpact::ReadOnly,
            ),
            Self::RegistrySchema => Annotation::new(
                "Get Type Schemas from Registry",
                ToolCategory::Discovery,
                EnvironmentImpact::ReadOnly,
            ),
            Self::WorldRemoveComponents => Annotation::new(
                "Remove Components",
                ToolCategory::Component,
                EnvironmentImpact::DestructiveIdempotent,
            ),
            Self::WorldRemoveResources => Annotation::new(
                "Remove Resources",
                ToolCategory::Resource,
                EnvironmentImpact::DestructiveIdempotent,
            ),
            Self::WorldReparentEntities => Annotation::new(
                "Reparent Entities",
                ToolCategory::Entity,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            Self::RpcDiscover => Annotation::new(
                "Discover BRP Methods",
                ToolCategory::Discovery,
                EnvironmentImpact::ReadOnly,
            ),
            Self::WorldSpawnEntity => Annotation::new(
                "Spawn Entity",
                ToolCategory::Entity,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            Self::BrpExecute => Annotation::new(
                "Execute BRP Method",
                ToolCategory::DynamicBrp,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            Self::BrpExtrasScreenshot => Annotation::new(
                "Take Screenshot",
                ToolCategory::Extras,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            Self::BrpExtrasSendKeys => Annotation::new(
                "Send Keys",
                ToolCategory::Extras,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            Self::BrpExtrasSetWindowTitle => Annotation::new(
                "Change Window Title",
                ToolCategory::Extras,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            Self::WorldGetComponentsWatch => Annotation::new(
                "Watch Component Changes",
                ToolCategory::WatchMonitoring,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            Self::WorldListComponentsWatch => Annotation::new(
                "Watch Component List",
                ToolCategory::WatchMonitoring,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            Self::BrpDeleteLogs => Annotation::new(
                "Delete Log Files",
                ToolCategory::Logging,
                EnvironmentImpact::DestructiveIdempotent,
            ),
            Self::BrpGetTraceLogPath => Annotation::new(
                "Get Trace Log Path",
                ToolCategory::Logging,
                EnvironmentImpact::ReadOnly,
            ),
            Self::BrpLaunchBevyApp => Annotation::new(
                "Launch Bevy App",
                ToolCategory::App,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            Self::BrpLaunchBevyExample => Annotation::new(
                "Launch Bevy Example",
                ToolCategory::App,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            Self::BrpListBevyApps => Annotation::new(
                "List Bevy Apps",
                ToolCategory::App,
                EnvironmentImpact::ReadOnly,
            ),
            Self::BrpListBevyExamples => Annotation::new(
                "List Bevy Examples",
                ToolCategory::App,
                EnvironmentImpact::ReadOnly,
            ),
            Self::BrpListBrpApps => Annotation::new(
                "List Bevy BRP-enabled Apps",
                ToolCategory::App,
                EnvironmentImpact::ReadOnly,
            ),
            Self::BrpListActiveWatches => Annotation::new(
                "List Active Watches",
                ToolCategory::WatchMonitoring,
                EnvironmentImpact::ReadOnly,
            ),
            Self::BrpStopWatch => Annotation::new(
                "Stop Watch",
                ToolCategory::WatchMonitoring,
                EnvironmentImpact::DestructiveIdempotent,
            ),
            Self::BrpListLogs => Annotation::new(
                "List Log Files",
                ToolCategory::Logging,
                EnvironmentImpact::ReadOnly,
            ),
            Self::BrpReadLog => Annotation::new(
                "Read Log File",
                ToolCategory::Logging,
                EnvironmentImpact::ReadOnly,
            ),
            Self::BrpSetTracingLevel => Annotation::new(
                "Set Tracing Level",
                ToolCategory::Logging,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            Self::BrpStatus => Annotation::new(
                "Check App Status",
                ToolCategory::App,
                EnvironmentImpact::ReadOnly,
            ),
            Self::BrpShutdown => Annotation::new(
                "Shutdown Bevy App",
                ToolCategory::App,
                EnvironmentImpact::DestructiveIdempotent,
            ),
            Self::BrpTypeGuide => Annotation::new(
                "Type guide for components and resources",
                ToolCategory::Discovery,
                EnvironmentImpact::ReadOnly,
            ),
            Self::BrpAllTypeGuides => Annotation::new(
                "Get type guides for all registered types",
                ToolCategory::Discovery,
                EnvironmentImpact::ReadOnly,
            ),
        }
    }

    /// Get parameter builder function for this tool
    /// thought about having the macro construct this but at this point
    /// the macro only constructs brp tool `ToolFn` implementations as there is no way
    /// i could think of to easily have it construct the custom implementations - although i suppose
    /// its possible it could have created a shell and we implement the rest manually
    /// but there's already enough indirection going on and so this is fine.
    #[allow(clippy::too_many_lines)]
    pub fn get_parameters(self) -> Option<fn() -> parameters::ParameterBuilder> {
        match self {
            Self::WorldDespawnEntity => {
                Some(parameters::build_parameters_from::<DespawnEntityParams>)
            }
            Self::WorldGetComponents => {
                Some(parameters::build_parameters_from::<GetComponentsParams>)
            }
            Self::WorldGetResources => {
                Some(parameters::build_parameters_from::<GetResourcesParams>)
            }
            Self::WorldInsertComponents => {
                Some(parameters::build_parameters_from::<InsertComponentsParams>)
            }
            Self::WorldInsertResources => {
                Some(parameters::build_parameters_from::<InsertResourcesParams>)
            }
            Self::WorldListComponents => {
                Some(parameters::build_parameters_from::<ListComponentsParams>)
            }
            Self::WorldListResources => {
                Some(parameters::build_parameters_from::<ListResourcesParams>)
            }
            Self::WorldMutateComponents => {
                Some(parameters::build_parameters_from::<MutateComponentsParams>)
            }
            Self::WorldMutateResources => {
                Some(parameters::build_parameters_from::<MutateResourcesParams>)
            }
            Self::WorldQuery => Some(parameters::build_parameters_from::<QueryParams>),
            Self::RegistrySchema => Some(parameters::build_parameters_from::<RegistrySchemaParams>),
            Self::WorldRemoveComponents => {
                Some(parameters::build_parameters_from::<RemoveComponentsParams>)
            }
            Self::WorldRemoveResources => {
                Some(parameters::build_parameters_from::<RemoveResourcesParams>)
            }
            Self::WorldReparentEntities => {
                Some(parameters::build_parameters_from::<ReparentEntitiesParams>)
            }
            Self::RpcDiscover => Some(parameters::build_parameters_from::<RpcDiscoverParams>),
            Self::WorldSpawnEntity => Some(parameters::build_parameters_from::<SpawnEntityParams>),
            Self::BrpExecute => Some(parameters::build_parameters_from::<ExecuteParams>),
            Self::BrpExtrasScreenshot => {
                Some(parameters::build_parameters_from::<ScreenshotParams>)
            }
            Self::BrpExtrasSendKeys => Some(parameters::build_parameters_from::<SendKeysParams>),
            Self::BrpExtrasSetWindowTitle => {
                Some(parameters::build_parameters_from::<SetWindowTitleParams>)
            }
            Self::WorldGetComponentsWatch => {
                Some(parameters::build_parameters_from::<GetComponentsWatchParams>)
            }
            Self::WorldListComponentsWatch => {
                Some(parameters::build_parameters_from::<ListComponentsWatchParams>)
            }
            Self::BrpDeleteLogs => Some(parameters::build_parameters_from::<DeleteLogsParams>),

            // this lot has no parametrers
            Self::BrpGetTraceLogPath
            | Self::BrpListBevyApps
            | Self::BrpListBevyExamples
            | Self::BrpListBrpApps
            | Self::BrpListActiveWatches => None,

            // and thest of these app and watch tools do have parameters
            Self::BrpLaunchBevyApp | Self::BrpLaunchBevyExample => {
                Some(parameters::build_parameters_from::<LaunchBevyBinaryParams>)
            }
            Self::BrpStopWatch => Some(parameters::build_parameters_from::<StopWatchParams>),
            Self::BrpListLogs => Some(parameters::build_parameters_from::<ListLogsParams>),
            Self::BrpReadLog => Some(parameters::build_parameters_from::<ReadLogParams>),
            Self::BrpSetTracingLevel => {
                Some(parameters::build_parameters_from::<SetTracingLevelParams>)
            }
            Self::BrpStatus => Some(parameters::build_parameters_from::<StatusParams>),
            Self::BrpShutdown => Some(parameters::build_parameters_from::<ShutdownParams>),
            Self::BrpTypeGuide => Some(parameters::build_parameters_from::<TypeGuideParams>),
            Self::BrpAllTypeGuides => {
                Some(parameters::build_parameters_from::<AllTypeGuidesParams>)
            }
        }
    }

    /// Create handler for this tool
    #[allow(clippy::too_many_lines)]
    pub fn create_handler(self) -> Arc<dyn ErasedToolFn> {
        match self {
            // BRP tools generated by the macro
            Self::WorldDespawnEntity => Arc::new(WorldDespawnEntity),
            Self::WorldGetComponents => Arc::new(WorldGetComponents),
            Self::WorldGetResources => Arc::new(WorldGetResources),
            Self::WorldInsertComponents => Arc::new(WorldInsertComponents),
            Self::WorldInsertResources => Arc::new(WorldInsertResources),
            Self::WorldListComponents => Arc::new(WorldListComponents),
            Self::WorldListResources => Arc::new(WorldListResources),
            Self::WorldMutateComponents => Arc::new(WorldMutateComponents),
            Self::WorldMutateResources => Arc::new(WorldMutateResources),
            Self::WorldQuery => Arc::new(WorldQuery),
            Self::RegistrySchema => Arc::new(RegistrySchema),
            Self::WorldRemoveComponents => Arc::new(WorldRemoveComponents),
            Self::WorldRemoveResources => Arc::new(WorldRemoveResources),
            Self::WorldReparentEntities => Arc::new(WorldReparentEntities),
            Self::RpcDiscover => Arc::new(RpcDiscover),
            Self::WorldSpawnEntity => Arc::new(WorldSpawnEntity),
            Self::BrpExtrasScreenshot => Arc::new(BrpExtrasScreenshot),
            Self::BrpExtrasSendKeys => Arc::new(BrpExtrasSendKeys),
            Self::BrpExtrasSetWindowTitle => Arc::new(BrpExtrasSetWindowTitle),

            // Special tools with their own implementations
            Self::BrpExecute => Arc::new(BrpExecute),
            Self::WorldGetComponentsWatch => Arc::new(WorldGetComponentsWatch),
            Self::WorldListComponentsWatch => Arc::new(BevyListWatch),
            Self::BrpListActiveWatches => Arc::new(BrpListActiveWatches),
            Self::BrpStopWatch => Arc::new(BrpStopWatch),
            Self::BrpTypeGuide => Arc::new(BrpTypeGuide),
            Self::BrpAllTypeGuides => Arc::new(BrpAllTypeGuides),

            // App tools
            Self::BrpDeleteLogs => Arc::new(DeleteLogs),
            Self::BrpGetTraceLogPath => Arc::new(GetTraceLogPath),
            Self::BrpLaunchBevyApp => Arc::new(app_tools::create_launch_bevy_app_handler()),
            Self::BrpLaunchBevyExample => Arc::new(app_tools::create_launch_bevy_example_handler()),
            Self::BrpListBevyApps => Arc::new(ListBevyApps),
            Self::BrpListBevyExamples => Arc::new(ListBevyExamples),
            Self::BrpListBrpApps => Arc::new(ListBrpApps),
            Self::BrpListLogs => Arc::new(ListLogs),
            Self::BrpReadLog => Arc::new(ReadLog),
            Self::BrpSetTracingLevel => Arc::new(SetTracingLevel),
            Self::BrpStatus => Arc::new(Status),
            Self::BrpShutdown => Arc::new(Shutdown),
        }
    }

    /// Convert this tool name to a complete `ToolDef`
    pub fn to_tool_def(self) -> ToolDef {
        ToolDef {
            tool_name:   self,
            annotations: self.get_annotations(),
            handler:     self.create_handler(),
            parameters:  self.get_parameters(),
        }
    }

    /// Get all tool definitions for registration with the MCP service
    pub fn get_all_tool_definitions() -> Vec<ToolDef> {
        use strum::IntoEnumIterator;

        Self::iter().map(Self::to_tool_def).collect()
    }

    /// Get a short human-readable title for this tool
    /// Extracted from the annotation data we already have
    pub fn short_title(self) -> String {
        self.get_annotations().title
    }
}
