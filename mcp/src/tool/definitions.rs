//! Tool definitions for BRP and local MCP tools.

use std::sync::Arc;

use super::annotations::{BrpToolAnnotations, EnvironmentImpact, ToolCategory};
use super::parameters;
use super::tool_def::ToolDef;
use super::tool_name::ToolName;
// Import generated tool structs from tool module
use super::tool_name::{
    BevyDestroy, BevyGet, BevyGetResource, BevyInsert, BevyInsertResource, BevyList,
    BevyListResources, BevyMutateComponent, BevyMutateResource, BevyQuery, BevyRegistrySchema,
    BevyRemove, BevyRemoveResource, BevyReparent, BevyRpcDiscover, BevySpawn,
    BrpExtrasDiscoverFormat, BrpExtrasScreenshot, BrpExtrasSendKeys,
};
use crate::app_tools::{
    self, LaunchBevyAppParams, LaunchBevyExampleParams, ListBevyApps, ListBevyExamples,
    ListBrpApps, Shutdown, ShutdownParams, Status, StatusParams,
};
// Import special tools that aren't generated by the macro
use crate::brp_tools::{
    BevyGetWatch, BevyListWatch, BrpExecute, BrpListActiveWatches, BrpStopWatch, ExecuteParams,
    GetWatchParams, ListWatchParams, StopWatchParams,
};
// Import parameter structs from tool module
use crate::brp_tools::{
    DestroyParams, DiscoverFormatParams, GetParams, GetResourceParams, InsertParams,
    InsertResourceParams, ListParams, ListResourcesParams, MutateComponentParams,
    MutateResourceParams, QueryParams, RegistrySchemaParams, RemoveParams, RemoveResourceParams,
    ReparentParams, RpcDiscoverParams, ScreenshotParams, SendKeysParams, SpawnParams,
};
use crate::log_tools::{
    DeleteLogs, DeleteLogsParams, GetTraceLogPath, ListLogs, ListLogsParams, ReadLog,
    ReadLogParams, SetTracingLevel, SetTracingLevelParams,
};
use crate::response::ResponseDef;

/// Get all tool definitions for registration with the MCP service
#[allow(clippy::too_many_lines)]
pub fn get_all_tool_definitions() -> Vec<ToolDef> {
    vec![
        ToolDef {
            tool_name:   ToolName::BevyDestroy,
            annotations: BrpToolAnnotations::new(
                "Destroy Bevy Entity",
                ToolCategory::Entity,
                EnvironmentImpact::DestructiveIdempotent,
            ),
            handler:     Arc::new(BevyDestroy),
            parameters:  Some(parameters::build_parameters_from::<DestroyParams>),
            response:    ResponseDef {
                message_template: "Successfully destroyed entity {entity}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyGet,
            annotations: BrpToolAnnotations::new(
                "Get Component Data",
                ToolCategory::Component,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(BevyGet),
            parameters:  Some(parameters::build_parameters_from::<GetParams>),
            response:    ResponseDef {
                message_template: "Retrieved component data from entity {entity} - component count: {component_count}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyGetResource,
            annotations: BrpToolAnnotations::new(
                "Get Resource Data",
                ToolCategory::Resource,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(BevyGetResource),
            parameters:  Some(parameters::build_parameters_from::<GetResourceParams>),
            response:    ResponseDef {
                message_template: "Retrieved resource: {resource}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyInsert,
            annotations: BrpToolAnnotations::new(
                "Insert Components",
                ToolCategory::Component,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            handler:     Arc::new(BevyInsert),
            parameters:  Some(parameters::build_parameters_from::<InsertParams>),
            response:    ResponseDef {
                message_template: "Successfully inserted components into entity {entity}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyInsertResource,
            annotations: BrpToolAnnotations::new(
                "Insert Resource",
                ToolCategory::Resource,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            handler:     Arc::new(BevyInsertResource),
            parameters:  Some(parameters::build_parameters_from::<InsertResourceParams>),
            response:    ResponseDef {
                message_template: "Successfully inserted/updated resource: {resource}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyList,
            annotations: BrpToolAnnotations::new(
                "List Components",
                ToolCategory::Component,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(BevyList),
            parameters:  Some(parameters::build_parameters_from::<ListParams>),
            response:    ResponseDef {
                message_template: "Listed {component_count} components",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyListResources,
            annotations: BrpToolAnnotations::new(
                "List Resources",
                ToolCategory::Resource,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(BevyListResources),
            parameters:  Some(parameters::build_parameters_from::<ListResourcesParams>),
            response:    ResponseDef {
                message_template: "Listed {resource_count} resources",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyMutateComponent,
            annotations: BrpToolAnnotations::new(
                "Mutate Component",
                ToolCategory::Component,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            handler:     Arc::new(BevyMutateComponent),
            parameters:  Some(parameters::build_parameters_from::<MutateComponentParams>),
            response:    ResponseDef {
                message_template: "Successfully mutated component on entity {entity}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyMutateResource,
            annotations: BrpToolAnnotations::new(
                "Mutate Resource",
                ToolCategory::Resource,
                EnvironmentImpact::AdditiveIdempotent,
            ),
            handler:     Arc::new(BevyMutateResource),
            parameters:  Some(parameters::build_parameters_from::<MutateResourceParams>),
            response:    ResponseDef {
                message_template: "Successfully mutated resource: `{resource}`",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyQuery,
            annotations: BrpToolAnnotations::new(
                "Query Entities/Components",
                ToolCategory::Component,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(BevyQuery),
            parameters:  Some(parameters::build_parameters_from::<QueryParams>),
            response:    ResponseDef {
                message_template: "Query completed successfully",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyRegistrySchema,
            annotations: BrpToolAnnotations::new(
                "Get Type Schemas",
                ToolCategory::Discovery,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(BevyRegistrySchema),
            parameters:  Some(parameters::build_parameters_from::<RegistrySchemaParams>),
            response:    ResponseDef {
                message_template: "Retrieved schema information",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyRemove,
            annotations: BrpToolAnnotations::new(
                "Remove Components",
                ToolCategory::Component,
                EnvironmentImpact::DestructiveIdempotent,
            ),
            handler:     Arc::new(BevyRemove),
            parameters:  Some(parameters::build_parameters_from::<RemoveParams>),
            response:    ResponseDef {
                message_template: "Successfully removed components from entity {entity}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyRemoveResource,
            annotations: BrpToolAnnotations::new(
                "Remove Resource",
                ToolCategory::Resource,
                EnvironmentImpact::DestructiveIdempotent,
            ),
            handler:     Arc::new(BevyRemoveResource),
            parameters:  Some(parameters::build_parameters_from::<RemoveResourceParams>),
            response:    ResponseDef {
                message_template: "Successfully removed resource",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyReparent,
            annotations: BrpToolAnnotations::new(
                "Reparent Entities",
                ToolCategory::Entity,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            handler:     Arc::new(BevyReparent),
            parameters:  Some(parameters::build_parameters_from::<ReparentParams>),
            response:    ResponseDef {
                message_template: "Successfully reparented entities",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyRpcDiscover,
            annotations: BrpToolAnnotations::new(
                "Discover BRP Methods",
                ToolCategory::Discovery,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(BevyRpcDiscover),
            parameters:  Some(parameters::build_parameters_from::<RpcDiscoverParams>),
            response:    ResponseDef {
                message_template: "Retrieved BRP method discovery information for {method_count} methods",
            },
        },
        // todo: (later) make this match curl
        ToolDef {
            tool_name:   ToolName::BevySpawn,
            annotations: BrpToolAnnotations::new(
                "Spawn Entity",
                ToolCategory::Entity,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            handler:     Arc::new(BevySpawn),
            parameters:  Some(parameters::build_parameters_from::<SpawnParams>),
            response:    ResponseDef {
                message_template: "Successfully spawned entity",
            },
        },
        // brp_execute is a LocalToolFnWithPort since it uses user-provided method names
        // rather than static method names from ToolDef constants
        ToolDef {
            tool_name:   ToolName::BrpExecute,
            annotations: BrpToolAnnotations::new(
                "Execute BRP Method",
                ToolCategory::DynamicBrp,
                EnvironmentImpact::DestructiveNonIdempotent,
            ),
            handler:     Arc::new(BrpExecute),
            parameters:  Some(parameters::build_parameters_from::<ExecuteParams>),
            response:    ResponseDef {
                message_template: "Method executed successfully",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpExtrasDiscoverFormat,
            annotations: BrpToolAnnotations::new(
                "Discover Component Format",
                ToolCategory::Extras,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(BrpExtrasDiscoverFormat),
            parameters:  Some(parameters::build_parameters_from::<DiscoverFormatParams>),
            response:    ResponseDef {
                message_template: "Format discovery completed",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpExtrasScreenshot,
            annotations: BrpToolAnnotations::new(
                "Take Screenshot",
                ToolCategory::Extras,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            handler:     Arc::new(BrpExtrasScreenshot),
            parameters:  Some(parameters::build_parameters_from::<ScreenshotParams>),
            response:    ResponseDef {
                message_template: "Successfully captured screenshot",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpExtrasSendKeys,
            annotations: BrpToolAnnotations::new(
                "Send Keys",
                ToolCategory::Extras,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            handler:     Arc::new(BrpExtrasSendKeys),
            parameters:  Some(parameters::build_parameters_from::<SendKeysParams>),
            response:    ResponseDef {
                message_template: "Successfully sent keyboard input",
            },
        },
        // BevyGetWatch and BevyListWatch are unusual in that
        // ultimately we do call bevy/get+watch and bevy/list+watch
        // but we need the local tool in order to set up the watch to stream
        // the results and log them to a file
        ToolDef {
            tool_name:   ToolName::BevyGetWatch,
            annotations: BrpToolAnnotations::new(
                "Watch Component Changes",
                ToolCategory::WatchMonitoring,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            handler:     Arc::new(BevyGetWatch),
            parameters:  Some(parameters::build_parameters_from::<GetWatchParams>),
            response:    ResponseDef {
                message_template: "Started entity watch {watch_id} for entity {entity}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BevyListWatch,
            annotations: BrpToolAnnotations::new(
                "Watch Component List",
                ToolCategory::WatchMonitoring,
                EnvironmentImpact::AdditiveNonIdempotent,
            ),
            handler:     Arc::new(BevyListWatch),
            parameters:  Some(parameters::build_parameters_from::<ListWatchParams>),
            response:    ResponseDef {
                message_template: "Started list watch {watch_id} for entity {entity}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpDeleteLogs,
            annotations: BrpToolAnnotations::new(
                "Delete Log Files",
                ToolCategory::Logging,
                EnvironmentImpact::DestructiveNonIdempotent,
            ),
            handler:     Arc::new(DeleteLogs),
            parameters:  Some(parameters::build_parameters_from::<DeleteLogsParams>),
            response:    ResponseDef {
                message_template: "Deleted {deleted_count} log files",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpGetTraceLogPath,
            annotations: BrpToolAnnotations::new(
                "Get Trace Log Path",
                ToolCategory::Logging,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(GetTraceLogPath),
            parameters:  None,
            response:    ResponseDef {
                message_template: "Trace log found",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpLaunchBevyApp,
            annotations: BrpToolAnnotations::new(
                "Launch Bevy App",
                ToolCategory::App,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(app_tools::create_launch_bevy_app_handler()),
            parameters:  Some(parameters::build_parameters_from::<LaunchBevyAppParams>),
            response:    ResponseDef {
                message_template: "Successfully launched bevy app '{target_name}' (PID: {pid})",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpLaunchBevyExample,
            annotations: BrpToolAnnotations::new(
                "Launch Bevy Example",
                ToolCategory::App,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(app_tools::create_launch_bevy_example_handler()),
            parameters:  Some(parameters::build_parameters_from::<LaunchBevyExampleParams>),
            response:    ResponseDef {
                message_template: "Successfully launched example '{target_name}' (PID: {pid})",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpListBevyApps,
            annotations: BrpToolAnnotations::new(
                "List Bevy Apps",
                ToolCategory::App,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(ListBevyApps),
            parameters:  None,
            response:    ResponseDef {
                message_template: "Found {count} Bevy apps",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpListBevyExamples,
            annotations: BrpToolAnnotations::new(
                "List Bevy Examples",
                ToolCategory::App,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(ListBevyExamples),
            parameters:  None,
            response:    ResponseDef {
                message_template: "Found {count} Bevy examples",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpListBrpApps,
            annotations: BrpToolAnnotations::new(
                "List Bevy BRP-enabled Apps",
                ToolCategory::App,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(ListBrpApps),
            parameters:  None,
            response:    ResponseDef {
                message_template: "Found {count} BRP-enabled apps",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpListActiveWatches,
            annotations: BrpToolAnnotations::new(
                "List Active Watches",
                ToolCategory::WatchMonitoring,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(BrpListActiveWatches),
            parameters:  None,
            response:    ResponseDef {
                message_template: "Found {count} active watches",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpStopWatch,
            annotations: BrpToolAnnotations::new(
                "Stop Watch",
                ToolCategory::WatchMonitoring,
                EnvironmentImpact::DestructiveIdempotent,
            ),
            handler:     Arc::new(BrpStopWatch),
            parameters:  Some(parameters::build_parameters_from::<StopWatchParams>),
            response:    ResponseDef {
                message_template: "Successfully stopped watch",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpListLogs,
            annotations: BrpToolAnnotations::new(
                "List Log Files",
                ToolCategory::Logging,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(ListLogs),
            parameters:  Some(parameters::build_parameters_from::<ListLogsParams>),
            response:    ResponseDef {
                message_template: "Found {count} log files",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpReadLog,
            annotations: BrpToolAnnotations::new(
                "Read Log File",
                ToolCategory::Logging,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(ReadLog),
            parameters:  Some(parameters::build_parameters_from::<ReadLogParams>),
            response:    ResponseDef {
                message_template: "Successfully read log file: {filename}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpSetTracingLevel,
            annotations: BrpToolAnnotations::new(
                "Set Tracing Level",
                ToolCategory::Logging,
                EnvironmentImpact::DestructiveNonIdempotent,
            ),
            handler:     Arc::new(SetTracingLevel),
            parameters:  Some(parameters::build_parameters_from::<SetTracingLevelParams>),
            response:    ResponseDef {
                message_template: "Tracing level set to '{tracing_level}' - diagnostic information will be logged to temp directory",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpStatus,
            annotations: BrpToolAnnotations::new(
                "Check App Status",
                ToolCategory::App,
                EnvironmentImpact::ReadOnly,
            ),
            handler:     Arc::new(Status),
            parameters:  Some(parameters::build_parameters_from::<StatusParams>),
            response:    ResponseDef {
                message_template: "{message}",
            },
        },
        ToolDef {
            tool_name:   ToolName::BrpShutdown,
            annotations: BrpToolAnnotations::new(
                "Shutdown Bevy App",
                ToolCategory::App,
                EnvironmentImpact::DestructiveNonIdempotent,
            ),
            handler:     Arc::new(Shutdown),
            parameters:  Some(parameters::build_parameters_from::<ShutdownParams>),
            response:    ResponseDef {
                message_template: "{message}",
            },
        },
    ]
}
