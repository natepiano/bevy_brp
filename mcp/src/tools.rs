//! Tool constants and descriptions for the Bevy BRP MCP server.
//!
//! This module consolidates all tool names, descriptions, and help text for the MCP server.
//! It provides a single source of truth for all tool-related constants.

// Macro to include help text files
macro_rules! include_help_text {
    ($file:expr) => {
        include_str!(concat!("../help_text/", $file))
    };
}

// Macro to define BRP methods with consistent naming
macro_rules! define_tool_constants {
    // For Bevy protocol methods (bevy/*)
    (bevy, $method:ident) => {
        paste::paste! {
            pub const [<BRP_METHOD_ $method:upper>]: &str = concat!("bevy/", stringify!($method));
            pub const [<TOOL_BEVY_ $method:upper>]: &str = concat!("bevy_", stringify!($method));
            pub const [<DESC_BEVY_ $method:upper>]: &str = include_help_text!(concat!("brp_tools/bevy_", stringify!($method), ".txt"));
        }
    };

    // For Bevy protocol methods with custom BRP path
    (bevy, $method:ident => $brp_path:expr) => {
        paste::paste! {
            pub const [<BRP_METHOD_ $method:upper>]: &str = $brp_path;
            pub const [<TOOL_BEVY_ $method:upper>]: &str = concat!("bevy_", stringify!($method));
            pub const [<DESC_BEVY_ $method:upper>]: &str = include_help_text!(concat!("brp_tools/bevy_", stringify!($method), ".txt"));
        }
    };

    // For BRP extras methods (brp_extras/*)
    (brp_extras, $method:ident) => {
        paste::paste! {
            pub const [<BRP_METHOD_EXTRAS_ $method:upper>]: &str = concat!("brp_extras/", stringify!($method));
            pub const [<TOOL_BRP_EXTRAS_ $method:upper>]: &str = concat!("brp_extras_", stringify!($method));
            pub const [<DESC_BRP_EXTRAS_ $method:upper>]: &str = include_help_text!(concat!("brp_tools/brp_extras_", stringify!($method), ".txt"));
        }
    };

    // For BRP internal tools (server-side functionality)
    (brp, $method:ident) => {
        paste::paste! {
            pub const [<TOOL_BRP_ $method:upper>]: &str = concat!("brp_", stringify!($method));
            pub const [<DESC_BRP_ $method:upper>]: &str = include_help_text!(concat!("brp_tools/brp_", stringify!($method), ".txt"));
        }
    };

    // For app management tools
    (app, $method:ident) => {
        paste::paste! {
            pub const [<TOOL_ $method:upper>]: &str = concat!("brp_", stringify!($method));
            pub const [<DESC_ $method:upper>]: &str = include_help_text!(concat!("app_tools/brp_", stringify!($method), ".txt"));
            pub const [<HANDLER_ $method:upper>]: &str = concat!("handler_", stringify!($method));
        }
    };

    // For log management tools
    (log, $method:ident) => {
        paste::paste! {
            pub const [<TOOL_ $method:upper>]: &str = concat!("brp_", stringify!($method));
            pub const [<DESC_ $method:upper>]: &str = include_help_text!(concat!("log_tools/brp_", stringify!($method), ".txt"));
            pub const [<HANDLER_ $method:upper>]: &str = concat!("handler_", stringify!($method));
        }
    };
}

// ============================================================================
// SPECIAL CONSTANTS
// ============================================================================

/// `bevy_brp_extras` prefix
pub const BRP_EXTRAS_PREFIX: &str = "brp_extras/";

// ============================================================================
// MCP TOOL NAMES AND DESCRIPTIONS - Generated by macros
// ============================================================================

// -----------------------------------------------------------------------------
// Core BRP Tools (Direct protocol methods)
// -----------------------------------------------------------------------------

// Generate tool constants for Bevy protocol methods
define_tool_constants!(bevy, list);
define_tool_constants!(bevy, get);
define_tool_constants!(bevy, destroy);
define_tool_constants!(bevy, insert);
define_tool_constants!(bevy, remove);
define_tool_constants!(bevy, list_resources);
define_tool_constants!(bevy, get_resource);
define_tool_constants!(bevy, insert_resource);
define_tool_constants!(bevy, remove_resource);
define_tool_constants!(bevy, mutate_resource);
define_tool_constants!(bevy, mutate_component);
define_tool_constants!(bevy, rpc_discover => "rpc.discover");
define_tool_constants!(bevy, query);
define_tool_constants!(bevy, spawn);
define_tool_constants!(bevy, registry_schema => "bevy/registry/schema");
define_tool_constants!(bevy, reparent);
define_tool_constants!(bevy, get_watch => "bevy/get+watch");
define_tool_constants!(bevy, list_watch => "bevy/list+watch");

// BRP execute tool (not a direct Bevy method, server-only)
define_tool_constants!(brp, execute);

// -----------------------------------------------------------------------------
// BRP Extras Tools (bevy_brp_extras plugin methods)
// -----------------------------------------------------------------------------

// Generate tool constants for BRP extras methods
define_tool_constants!(brp_extras, discover_format);
define_tool_constants!(brp_extras, screenshot);
define_tool_constants!(brp_extras, send_keys);
define_tool_constants!(brp_extras, set_debug_mode);

// Manual constant for BRP extras shutdown method (used by app shutdown tool)
// We don't want to expose it twice as an mcp tool so here we just define the method name only
// it will be called in app_tools::brp_shutdown
pub const BRP_METHOD_EXTRAS_SHUTDOWN: &str = "brp_extras/shutdown";

// -----------------------------------------------------------------------------
// BRP Watch Assist Tools (not direct protocol methods)
// -----------------------------------------------------------------------------

// Generate tool constants for BRP internal tools
define_tool_constants!(brp, stop_watch);
define_tool_constants!(brp, list_active_watches);

// -----------------------------------------------------------------------------
// Application Management Tools
// -----------------------------------------------------------------------------

// Generate tool constants for app management tools
define_tool_constants!(app, list_bevy_apps);
define_tool_constants!(app, list_bevy_examples);
define_tool_constants!(app, list_brp_apps);
define_tool_constants!(app, launch_bevy_app);
define_tool_constants!(app, launch_bevy_example);
define_tool_constants!(app, shutdown);
define_tool_constants!(app, status);

// -----------------------------------------------------------------------------
// Log Management Tools
// -----------------------------------------------------------------------------

// Generate tool constants for log management tools
define_tool_constants!(log, list_logs);
define_tool_constants!(log, read_log);
define_tool_constants!(log, cleanup_logs);
define_tool_constants!(log, get_trace_log_path);
define_tool_constants!(log, set_tracing_level);
