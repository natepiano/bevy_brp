{
  "_comment": "Template for expected changes - copy examples as needed to create_mutation_test_json_expected_changes.json",
  "_note": "This file is preserved in git to survive baseline promotions that reset expected_changes.json",
  "format_version": "1.0",
  "examples": [
    {
      "id": 1,
      "pattern_type": "ENUM_VARIANT_QUALIFIED_NAMES",
      "description": "Enum variants changed from simple names to fully qualified names (e.g. 'Additive' -> 'BloomCompositeMode::Additive')",
      "change_type": "value_changed",
      "path_regex": "mutation_paths\\..*\\.examples\\[\\d+\\]\\.applicable_variants\\[\\d+\\]$",
      "value_condition": "current.endswith('::' + baseline) and '::' not in baseline and '::' in current"
    },
    {
      "id": 2,
      "pattern_type": "FIELD_ADDED_EXAMPLE",
      "description": "New field added to mutation paths",
      "change_type": "added",
      "path_regex": "mutation_paths\\.new_field$",
      "value_condition": "True"
    },
    {
      "id": 3,
      "pattern_type": "FIELD_REMOVED_EXAMPLE",
      "description": "Field removed from mutation paths",
      "change_type": "removed",
      "path_regex": "mutation_paths\\.old_field$",
      "value_condition": "True"
    },
    {
      "id": 4,
      "pattern_type": "TYPE_CHANGED_EXAMPLE",
      "description": "Field type changed from string to dict",
      "change_type": "type_changed",
      "path_regex": "mutation_paths\\.some_field\\.example$",
      "value_condition": "isinstance(baseline, str) and isinstance(current, dict)"
    }
  ],
  "pattern_matching_notes": [
    "Changes are matched exclusively - first match wins",
    "More specific patterns should have lower ID numbers",
    "value_condition is Python code evaluated with 'baseline' and 'current' variables",
    "path_regex uses Python regex syntax - escape backslashes properly",
    "Use 'True' as value_condition for simple path-only matches"
  ]
}