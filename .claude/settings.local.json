{
  "permissions": {
    "allow": [
      "Bash(./test-app/tests/merge_batch_results.sh:*)",
      "Bash(./test-app/tests/renumber_batches.sh:*)",
      "Bash(./test-app/tests/transform_brp_response.sh:*)",
      "Bash(./test-app/tests/type_validation_stats.sh:*)",
      "Bash(cargo build:*)",
      "Bash(cargo metadata:*)",
      "Bash(cargo:*)",
      "Bash(cat:*)",
      "Bash(chmod:*)",
      "Bash(do echo \"=== $type ===\")",
      "Bash(done)",
      "Bash(echo $?)",
      "Bash(echo $HOME)",
      "Bash(echo $TMPDIR)",
      "Bash(find:*)",
      "Bash(for type in bevy_render::camera::manual_texture_view::ManualTextureViewHandle bevy_render::camera::projection::Projection bevy_render::experimental::occlusion_culling::OcclusionCulling bevy_render::mesh::components::Mesh2d bevy_render::mesh::components::Mesh3d)",
      "Bash(gh api:*)",
      "Bash(gh issue view:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git rm:*)",
      "Bash(grep:*)",
      "Bash(jq:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(touch:*)",
      "Bash(zoxide query:*)",
      "Read(/Users/natemccoy/**)",
      "Read(/Users/natemccoy/.claude/commands/**)",
      "Read(/Users/natemccoy/.claude/commands/shared/**)",
      "Read(/tmp/**)",
      "WebFetch(domain:cloudartisan.com)",
      "WebSearch",
      "mcp__brp__bevy_destroy",
      "mcp__brp__bevy_get",
      "mcp__brp__bevy_get_resource",
      "mcp__brp__bevy_get_watch",
      "mcp__brp__bevy_insert",
      "mcp__brp__bevy_insert_resource",
      "mcp__brp__bevy_list",
      "mcp__brp__bevy_list_resources",
      "mcp__brp__bevy_list_watch",
      "mcp__brp__bevy_mutate_component",
      "mcp__brp__bevy_mutate_resource",
      "mcp__brp__bevy_query",
      "mcp__brp__bevy_registry_schema",
      "mcp__brp__bevy_remove",
      "mcp__brp__bevy_remove_resource",
      "mcp__brp__bevy_rpc_discover",
      "mcp__brp__bevy_spawn",
      "mcp__brp__brp_delete_logs",
      "mcp__brp__brp_execute",
      "mcp__brp__brp_extras_screenshot",
      "mcp__brp__brp_extras_send_keys",
      "mcp__brp__brp_extras_set_window_title",
      "mcp__brp__brp_launch_bevy_app",
      "mcp__brp__brp_launch_bevy_example",
      "mcp__brp__brp_list_active_watches",
      "mcp__brp__brp_list_bevy_apps",
      "mcp__brp__brp_list_bevy_examples",
      "mcp__brp__brp_list_brp_apps",
      "mcp__brp__brp_list_logs",
      "mcp__brp__brp_read_log",
      "mcp__brp__brp_set_tracing_level",
      "mcp__brp__brp_shutdown",
      "mcp__brp__brp_status",
      "mcp__brp__brp_stop_watch",
      "mcp__brp__brp_type_guide",
      "Bash(ls:*)",
      "Bash(.claude/commands/scripts/summarize_results.sh:*)",
      "mcp__brp__brp_all_type_guides",
      "Bash(cp:*)",
      "Read(//tmp/**)",
      "Bash(.claude/commands/scripts/compare_mutations_quick.sh:*)",
      "Bash(.claude/commands/scripts/create_mutation_test_json_transform_response.sh:*)",
      "Bash(head:*)",
      "Bash(.claude/commands/scripts/create_mutation_test_json_stats.sh:*)",
      "Bash(if [ -f \"$TMPDIR/all_types.json\" ])",
      "Bash(then cp \"$TMPDIR/all_types.json\" \"$TMPDIR/all_types_previous.json\")",
      "Bash(fi)",
      "mcp__brp__brp_get_trace_log_path",
      "Bash(then)",
      "Bash(python3:*)",
      "Bash(git stash:*)",
      "Bash(./.claude/commands/scripts/mutation_test_renumber_batches.sh:*)",
      "Bash(./.claude/commands/scripts/mutation_test_merge_batch_results.sh:*)",
      "Bash(echo:*)",
      "Bash(~/.claude/commands/bash/build-check.sh:*)",
      "Bash(rustc:*)",
      "Read(//Users/natemccoy/.claude/commands/bash/**)",
      "Bash(./.claude/commands/scripts/create_mutation_test_json_stats.sh:*)",
      "Bash(./.claude/commands/scripts/compare_mutations_quick.sh:*)",
      "Bash(diff:*)",
      "Read(//Users/natemccoy/.claude/**)",
      "Read(//Users/natemccoy/**)",
      "Bash(/Users/natemccoy/rust/bevy_brp/.claude/commands/scripts/mutation_test_merge_batch_results.sh:*)",
      "Bash(.claude/commands/scripts/get_excluded_types.sh:*)",
      "Bash(.claude/commands/scripts/create_mutation_test_json_get_excluded_types.sh:*)",
      "Bash(.claude/commands/scripts/create_mutation_test_json_structured_comparison.sh:*)",
      "Bash(.claude/commands/scripts/create_mutation_test_json_promote_baseline.sh:*)",
      "Bash(.claude/commands/scripts/create_mutation_test_json_augment_response.sh:*)",
      "Bash(.claude/commands/scripts/mutation_test_renumber_batches.sh:*)",
      "mcp__brp__brp_all_type_guides",
      "Bash(if [ -f \"$TMPDIR/all_types_baseline.json\" ])",
      "Bash(else)",
      "WebFetch(domain:github.com)",
      "Read(///**)",
      "WebFetch(domain:status.anthropic.com)",
      "Bash(for file in mcp/src/brp_tools/brp_type_guide/mutation_path_builder/builders/*.rs)",
      "WebFetch(domain:docs.rs)",
      "Bash(if [ -f \"/var/folders/rf/twhh0jfd243fpltn5k0w1t980000gn/T/all_types.json\" ])",
      "Bash(then cp /var/folders/rf/twhh0jfd243fpltn5k0w1t980000gn/T/all_types.json /var/folders/rf/twhh0jfd243fpltn5k0w1t980000gn/T/all_types_previous.json)",
      "Bash(then cp $TMPDIR/all_types.json $TMPDIR/all_types_previous.json)",
      "Bash(.claude/commands/scripts/get_type_kind.sh:*)",
      "Bash(.claude/commands/scripts/get_type_guide.sh:*)",
      "Bash(.claude/commands/scripts/compare_mutation_path.sh:*)",
      "Bash(__NEW_LINE__ echo -e \"\\n=== CURRENT Cascades ===\")",
      "Bash(CURRENT_JSON='{\"\"bevy_pbr::light::Cascades\"\": {\"\"has_deserialize\"\": false, \"\"has_serialize\"\": false, \"\"in_registry\"\": true, \"\"mutation_paths\"\": {\"\"\"\": {\"\"description\"\": \"\"Replace the entire Cascades struct\"\", \"\"example\"\": {\"\"cascades\"\": {\"\"8589934670\"\": [{\"\"clip_from_cascade\"\": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], \"\"clip_from_world\"\": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], \"\"texel_size\"\": 3.1415927410125732, \"\"world_from_cascade\"\": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]}]}}}}}')",
      "Bash(BASELINE_JSON='{\"\"guide\"\": {\"\"has_deserialize\"\": false, \"\"has_serialize\"\": false, \"\"in_registry\"\": true, \"\"mutation_paths\"\": {\"\"\"\": {\"\"description\"\": \"\"Replace the entire Cascades struct\"\", \"\"example\"\": {\"\"cascades\"\": {\"\"8589934670\"\": [{\"\"clip_from_cascade\"\": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], \"\"clip_from_world\"\": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], \"\"texel_size\"\": 3.1415927410125732, \"\"world_from_cascade\"\": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]}, {\"\"clip_from_cascade\"\": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], \"\"clip_from_world\"\": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]], \"\"texel_size\"\": 3.1415927410125732, \"\"world_from_cascade\"\": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]}]}}}}}}')",
      "Bash(xargs:*)",
      "Bash(for file in array_builder enum_builder struct_builder tuple_builder)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(then echo \"File exists\")",
      "Bash(else echo \"File does not exist\")",
      "Bash(./.claude/commands/scripts/mutation_test_renumber_batches_dict.sh:*)",
      "Bash(for script in compare_mutation_path.sh compare_mutations_check_type.py compare_mutations_summarize.sh create_mutation_test_json_augment_response.sh create_mutation_test_json_deep_comparison.py create_mutation_test_json_promote_baseline.sh create_mutation_test_json_structured_comparison.sh get_type_guide.sh get_type_kind.sh mutation_test_get_assignment_guide.py mutation_test_get_batch_assignments.py mutation_test_get_batch_types.py mutation_test_get_type_guides.py mutation_test_get_types_by_index.py mutation_test_merge_batch_results.sh mutation_test_renumber_batches.sh)",
      "Bash(do echo \"=== $script ===\")",
      "Bash(for script in mutation_test_get_batch_types.py mutation_test_get_type_guides.py mutation_test_get_types_by_index.py)",
      "WebFetch(domain:docs.claude.com)"
    ],
    "deny": [
      "Bash(sed:*)"
    ],
    "ask": [],
    "additionalDirectories": [
      "/Users/natemccoy/rust/bevy",
      "/Users/natemccoy/rust"
    ]
  }
}