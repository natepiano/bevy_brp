name: CI

# Combined CI workflow for all testing
on:
  pull_request:
    branches: [main]
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

# Cancel duplicate runs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Fast format check on one OS
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check formatting
        run: cargo +nightly fmt -- --check

  # Clippy
  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy

      - name: Install mold linker
        uses: rui314/setup-mold@v1

      - name: Install and cache Linux dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libudev-dev libasound2-dev pkg-config clang libwayland-dev libxkbcommon-dev
          version: 1.0

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-cargo-clippy-
            ${{ runner.os }}-cargo-

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features

  # Build check
  build:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install mold linker
        uses: rui314/setup-mold@v1

      - name: Install and cache Linux dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libudev-dev libasound2-dev pkg-config clang libwayland-dev libxkbcommon-dev
          version: 1.0

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-cargo-build-
            ${{ runner.os }}-cargo-

      - name: Build release
        run: cargo build --release --all-features --workspace --examples

  # Test suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Install mold linker
        uses: rui314/setup-mold@v1

      - name: Install and cache Linux dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libudev-dev libasound2-dev pkg-config clang libwayland-dev libxkbcommon-dev
          version: 1.0

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-

      - name: Run all tests
        run: cargo nextest run --all-features --workspace
        env:
          # Disable GPU/windowing for headless testing
          WGPU_BACKEND: "gl"
          WINIT_UNIX_BACKEND: "x11"