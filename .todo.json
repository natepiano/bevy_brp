[
  {
    "id": "001",
    "content": "Implement DESIGN-001: Add type_supports_mutation method to MutationPathContext",
    "status": "pending",
    "priority": "high",
    "notes": "Core method for recursive mutation capability checking"
  },
  {
    "id": "002",
    "content": "Implement DESIGN-001: Add helper methods extract_type_from_ref, extract_map_value_type, extract_option_inner_type",
    "status": "pending",
    "priority": "high",
    "notes": "Helper methods for schema field extraction"
  },
  {
    "id": "003",
    "content": "Run cargo build && cargo +nightly fmt after adding mutation capability methods",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format check"
  },
  {
    "id": "004",
    "content": "Implement DESIGN-002: Update build_tuple_element_path to use type_supports_mutation instead of registry check",
    "status": "pending",
    "priority": "high",
    "notes": "Direct fix for VisibilityClass issue"
  },
  {
    "id": "005",
    "content": "Run cargo build && cargo +nightly fmt after tuple element path changes",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format check"
  },
  {
    "id": "006",
    "content": "Implement TYPE-SYSTEM-002: Replace conditional chains with pattern matching in struct mutation path building",
    "status": "pending",
    "priority": "high",
    "notes": "Clean up code pattern for consistency"
  },
  {
    "id": "007",
    "content": "Update struct field checking in build_type_based_paths to use type_supports_mutation",
    "status": "pending",
    "priority": "high",
    "notes": "Apply mutation capability checking to struct fields"
  },
  {
    "id": "008",
    "content": "Run cargo build && cargo +nightly fmt after struct field changes",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format check"
  },
  {
    "id": "009",
    "content": "Run cargo clippy --workspace --all-targets --all-features -- -D warnings",
    "status": "pending",
    "priority": "high",
    "notes": "Check for clippy warnings"
  },
  {
    "id": "010",
    "content": "Fix any clippy issues following warning rules",
    "status": "pending",
    "priority": "high",
    "notes": "Address any clippy warnings found"
  },
  {
    "id": "011",
    "content": "Implement SIMPLIFICATION-001: Remove RegistryLookupResult enum definition",
    "status": "pending",
    "priority": "high",
    "notes": "Clean up obsolete enum"
  },
  {
    "id": "012",
    "content": "Update all RegistryLookupResult usage sites to use direct mutation capability checking",
    "status": "pending",
    "priority": "high",
    "notes": "Replace enum usage with direct checks"
  },
  {
    "id": "013",
    "content": "Run cargo build && cargo +nightly fmt after enum removal",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format check"
  },
  {
    "id": "014",
    "content": "Test VisibilityClass with brp_type_schema to verify mutation paths are fixed",
    "status": "pending",
    "priority": "high",
    "notes": "Primary validation test"
  },
  {
    "id": "015",
    "content": "Test SmallVec<[TypeId; 1]> directly to verify no mutation support",
    "status": "pending",
    "priority": "high",
    "notes": "Direct test of problematic type"
  },
  {
    "id": "016",
    "content": "Test edge cases: Vec<TypeId>, Option<TypeId>, HashMap<String, TypeId>",
    "status": "pending",
    "priority": "high",
    "notes": "Test other non-mutatable container types"
  },
  {
    "id": "017",
    "content": "Run cargo nextest run",
    "status": "pending",
    "priority": "high",
    "notes": "Run all tests"
  },
  {
    "id": "018",
    "content": "STOP if test failures - review with user",
    "status": "pending",
    "priority": "high",
    "notes": "Check for test failures"
  },
  {
    "id": "019",
    "content": "Run final cargo clippy --workspace --all-targets --all-features -- -D warnings",
    "status": "pending",
    "priority": "high",
    "notes": "Final clippy check"
  },
  {
    "id": "020",
    "content": "Run plan alignment review using ~/.claude/commands/plan_alignment_review.md",
    "status": "pending",
    "priority": "high",
    "notes": "Verify implementation matches plan"
  }
]