[
  {
    "id": "meta_todo",
    "content": "MetaTodo: Do not deviate from the plan - if you think you need to deviate, STOP and ask the user for guidance",
    "status": "pending",
    "priority": "high",
    "notes": ""
  },
  {
    "id": "add_regex_constant",
    "content": "Add ENUM_UNIT_VARIANT_ACCESS_ERROR_REGEX to constants.rs",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build_after_regex",
    "content": "Build and fix any compile errors and warnings after adding regex constant",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "add_error_pattern",
    "content": "Add EnumUnitVariantAccessError variant to ErrorPattern enum in detection.rs",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build_after_pattern",
    "content": "Build and fix any compile errors and warnings after adding error pattern",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "update_detection_imports",
    "content": "Update imports in detection.rs to include new regex constant",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build_after_imports",
    "content": "Build and fix any compile errors and warnings after updating imports",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "update_detection_logic",
    "content": "Update match_all_patterns() in detection.rs to check for new pattern BEFORE ACCESS_ERROR_REGEX",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build_after_detection",
    "content": "Build and fix any compile errors and warnings after updating detection logic",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "clippy_after_detection",
    "content": "Run cargo clippy --workspace --all-targets --all-features -- -D warnings",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "fix_clippy_detection",
    "content": "Fix any clippy issues found in detection module",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "update_transformer_can_handle",
    "content": "Add EnumUnitVariantAccessError to can_handle() method in EnumVariantTransformer",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build_after_can_handle",
    "content": "Build and fix any compile errors and warnings after updating can_handle()",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "update_transformer_transform",
    "content": "Add handling for EnumUnitVariantAccessError in transform_with_error() method",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build_after_transform",
    "content": "Build and fix any compile errors and warnings after updating transform_with_error()",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "final_clippy",
    "content": "Run cargo clippy --workspace --all-targets --all-features -- -D warnings",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "fix_final_clippy",
    "content": "Fix any clippy issues found in the final check",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "format_code",
    "content": "Run cargo +nightly fmt",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "run_tests",
    "content": "Run cargo nextest run",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "review_test_results",
    "content": "If there are test issues, STOP and review them with the user",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "code_review_stop",
    "content": "STOP work here and return control to main agent for code review",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "task_code_review_agent",
    "content": "Task new subagent to do code review of changes - focus on duplication, complexity, and validating implementation plan was followed",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "review_suggestions",
    "content": "When code review subagent returns, STOP and review suggested changes with user",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  }
]