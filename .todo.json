[
  {
    "id": "terminal-title",
    "content": "run `echo -e \"\\e]2;Implementation: Convert type_category from String to Enum\\007\"` to set terminal title",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "meta-todo",
    "content": "Do not deviate from the plan - if you think you need to deviate, STOP and ask the user for guidance",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-1",
    "content": "Define TypeCategory enum in unified_types.rs with all variants (Unknown, Struct, TupleStruct, Enum, MathType, Component)",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-1",
    "content": "build and fix any compile errors and any compile warnings after defining enum",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-2",
    "content": "Update UnifiedTypeInfo struct field from type_category: String to type_category: TypeCategory",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-2",
    "content": "build and fix any compile errors and any compile warnings after changing struct field",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-3",
    "content": "Update UnifiedTypeInfo::new() to use TypeCategory::Unknown instead of \"Unknown\".to_string()",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-3",
    "content": "build and fix any compile errors and any compile warnings after updating new() method",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-4",
    "content": "Update transform_value() and get_spawn_example() match statements in unified_types.rs to use enum variants",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-4",
    "content": "build and fix any compile errors and any compile warnings after updating match statements",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "clippy-1",
    "content": "run `cargo clippy --workspace --all-targets --all-features -- -D warnings`",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "clippy-fix-1",
    "content": "fix any clippy issues",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-5",
    "content": "Update adapters.rs: add string-to-enum parsing function and update match statement to use enum variants",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-5",
    "content": "build and fix any compile errors and any compile warnings after updating adapters",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-6",
    "content": "Update recovery_engine.rs: change string comparisons to enum comparisons and assignments to enum variants",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-6",
    "content": "build and fix any compile errors and any compile warnings after updating recovery engine",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-7",
    "content": "Update transformers/math_type.rs: fix \"Math\" to TypeCategory::MathType and \"Struct\" to TypeCategory::Struct",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-7",
    "content": "build and fix any compile errors and any compile warnings after updating math_type transformer",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-8",
    "content": "Update transformers/enum_variant.rs: change \"Enum\" to TypeCategory::Enum",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-8",
    "content": "build and fix any compile errors and any compile warnings after updating enum_variant transformer",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "clippy-2",
    "content": "run `cargo clippy --workspace --all-targets --all-features -- -D warnings`",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "clippy-fix-2",
    "content": "fix any clippy issues",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-9",
    "content": "Update engine.rs: change FormatDiscoveryCorrection type_category field from Option<String> to Option<TypeCategory>",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-9",
    "content": "build and fix any compile errors and any compile warnings after updating engine",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-10",
    "content": "Update tests.rs: change string expectations to enum variant expectations in test assertions",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-10",
    "content": "build and fix any compile errors and any compile warnings after updating tests",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "impl-11",
    "content": "Fix the original failing test in extras_integration.rs by setting type_info.type_category = TypeCategory::Struct",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "build-11",
    "content": "build and fix any compile errors and any compile warnings after fixing the failing test",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "clippy-final",
    "content": "run `cargo clippy --workspace --all-targets --all-features -- -D warnings`",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "clippy-fix-final",
    "content": "fix any clippy issues",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "format",
    "content": "run `cargo +nightly fmt`",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "test",
    "content": "run 'cargo nextest run'",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "test-review",
    "content": "If there are test issues, STOP and review them with the user",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "code-review-setup",
    "content": "the subagent should STOP work here and return control to you and you should then continue with the following",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "code-review-task",
    "content": "task a new subagent to do a code review of the changes in the worktree - tell it to focus on identifying duplication and complexity. Additionally, ask that it focus on validating that the implementation plan was actually implemented. Emphasize that it should only read and analyze, not modify anything.",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  },
  {
    "id": "code-review-review",
    "content": "when this new subagent returns, STOP and review the suggested changes with the user",
    "status": "pending",
    "priority": "medium",
    "notes": ""
  }
]