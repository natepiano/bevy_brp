[
  {
    "id": "recursion_depth_newtype",
    "content": "Add RecursionDepth newtype to constants.rs",
    "status": "pending",
    "priority": "high",
    "notes": "Add newtype with increment, exceeds_limit, and Deref implementation as specified in plan"
  },
  {
    "id": "build_after_constants",
    "content": "Run `cargo build && cargo +nightly fmt` and fix errors",
    "status": "pending", 
    "priority": "high",
    "notes": "Build and format after adding RecursionDepth"
  },
  {
    "id": "type_extraction_helpers",
    "content": "Add type extraction helper methods to MutationPathContext",
    "status": "pending",
    "priority": "high", 
    "notes": "Add extract_list_element_type, extract_map_value_type, extract_option_inner_type, extract_tuple_element_types"
  },
  {
    "id": "build_after_helpers",
    "content": "Run `cargo build && cargo +nightly fmt` and fix errors",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format after adding helper methods"
  },
  {
    "id": "type_supports_mutation",
    "content": "Add comprehensive type_supports_mutation methods to MutationPathContext",
    "status": "pending",
    "priority": "high",
    "notes": "Add type_supports_mutation and type_supports_mutation_with_depth with recursion protection"
  },
  {
    "id": "build_after_mutation_check",
    "content": "Run `cargo build && cargo +nightly fmt` and fix errors", 
    "status": "pending",
    "priority": "high",
    "notes": "Build and format after adding mutation support methods"
  },
  {
    "id": "update_typekind_build_paths",
    "content": "Update TypeKind::build_paths to check type support before building",
    "status": "pending",
    "priority": "high",
    "notes": "Add checks for container types before proceeding with path building"
  },
  {
    "id": "build_after_typekind_update",
    "content": "Run `cargo build && cargo +nightly fmt` and fix errors",
    "status": "pending",
    "priority": "high", 
    "notes": "Build and format after updating TypeKind"
  },
  {
    "id": "add_not_mutatable_path",
    "content": "Add build_not_mutatable_path method to TypeKind",
    "status": "pending",
    "priority": "high",
    "notes": "Add method to build error paths for non-mutatable types"
  },
  {
    "id": "build_after_not_mutatable",
    "content": "Run `cargo build && cargo +nightly fmt` and fix errors",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format after adding not_mutatable_path method"
  },
  {
    "id": "update_tuple_element_path",
    "content": "Update build_tuple_element_path to check element mutation support",
    "status": "pending", 
    "priority": "high",
    "notes": "Check if tuple element types support mutation before building paths"
  },
  {
    "id": "build_after_tuple_update",
    "content": "Run `cargo build && cargo +nightly fmt` and fix errors",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format after updating tuple element path building"
  },
  {
    "id": "run_clippy",
    "content": "Run `cargo clippy --workspace --all-targets --all-features -- -D warnings`",
    "status": "pending",
    "priority": "high",
    "notes": "Check for clippy warnings after implementation"
  },
  {
    "id": "fix_clippy_issues", 
    "content": "Fix all clippy issues following warning rules",
    "status": "pending",
    "priority": "high",
    "notes": "Address any clippy warnings without adding #[allow(dead_code)]"
  },
  {
    "id": "test_visibility_class",
    "content": "Test VisibilityClass shows no mutation paths and no mutate operation",
    "status": "pending",
    "priority": "high",
    "notes": "Verify the main problem case is fixed"
  },
  {
    "id": "test_smallvec_typeid",
    "content": "Test SmallVec<[TypeId; 1]> shows no mutation paths and no mutate operation",
    "status": "pending",
    "priority": "high", 
    "notes": "Verify container with non-serializable elements is non-mutatable"
  },
  {
    "id": "test_option_typeid",
    "content": "Test Option<TypeId> is non-mutatable",
    "status": "pending",
    "priority": "high",
    "notes": "Verify Option with non-serializable inner type"
  },
  {
    "id": "test_vec_string",
    "content": "Test Vec<String> remains mutatable", 
    "status": "pending",
    "priority": "high",
    "notes": "Verify container with serializable elements still works"
  },
  {
    "id": "test_hashmap_typeid",
    "content": "Test HashMap<String, TypeId> is non-mutatable",
    "status": "pending",
    "priority": "high",
    "notes": "Verify Map with non-serializable value type"
  },
  {
    "id": "test_array_typeid", 
    "content": "Test [TypeId; 3] is non-mutatable",
    "status": "pending",
    "priority": "high",
    "notes": "Verify Array with non-serializable element type"
  },
  {
    "id": "test_tuple_mixed",
    "content": "Test (String, TypeId) has mixed mutability",
    "status": "pending",
    "priority": "high",
    "notes": "Verify tuple with some mutatable and some non-mutatable elements"
  },
  {
    "id": "run_tests",
    "content": "Run `cargo nextest run`",
    "status": "pending",
    "priority": "high",
    "notes": "Run full test suite to ensure no regressions"
  },
  {
    "id": "check_test_failures",
    "content": "STOP if test failures - review with user",
    "status": "pending", 
    "priority": "high",
    "notes": "If tests fail, stop and get user guidance"
  }
]