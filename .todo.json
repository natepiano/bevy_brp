[
  {
    "id": "phase1-1",
    "content": "Phase 1.1: Delete redundant precheck methods from mutation_path_builders.rs (type_supports_mutation and type_supports_mutation_with_depth)",
    "status": "pending",
    "priority": "high",
    "notes": "Delete lines 239-339 containing type_supports_mutation() and type_supports_mutation_with_depth() methods that perform redundant recursion"
  },
  {
    "id": "phase1-2",
    "content": "Phase 1.2: Run cargo build && cargo +nightly fmt and fix errors following warning rules",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format after deleting precheck methods, remove dead code instead of adding #[allow(dead_code)]"
  },
  {
    "id": "phase2-1",
    "content": "Phase 2.1: Remove precheck block from TypeKind::build_paths method (lines 471-489)",
    "status": "pending",
    "priority": "high",
    "notes": "Remove the entire precheck match block that calls type_supports_mutation() before path building"
  },
  {
    "id": "phase2-2",
    "content": "Phase 2.2: Run cargo build && cargo +nightly fmt and fix errors following warning rules",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format after removing precheck block"
  },
  {
    "id": "phase3-1",
    "content": "Phase 3.1: Update TypeKind::build_paths dispatch with inline Value type checking (SIMPLIFICATION-001)",
    "status": "pending",
    "priority": "high",
    "notes": "Implement inline Value type checking in dispatch instead of separate ValueMutationBuilder as per design review"
  },
  {
    "id": "phase3-2",
    "content": "Phase 3.2: Update TypeKind::build_paths dispatch with inline container type checking for List/Map/Option",
    "status": "pending",
    "priority": "high",
    "notes": "Add inline checking for container types in the dispatch method"
  },
  {
    "id": "phase3-3",
    "content": "Phase 3.3: Run cargo build && cargo +nightly fmt and fix errors following warning rules",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format after updating dispatch with inline checking"
  },
  {
    "id": "phase3-4",
    "content": "Phase 3.4: Implement Map container inline checking with MapMutationBuilder (IMPLEMENTATION-001)",
    "status": "pending",
    "priority": "medium",
    "notes": "Add MapMutationBuilder with inline value type checking as per design review agreement"
  },
  {
    "id": "phase3-5",
    "content": "Phase 3.5: Run cargo build && cargo +nightly fmt and fix errors following warning rules",
    "status": "pending",
    "priority": "medium",
    "notes": "Build and format after implementing MapMutationBuilder"
  },
  {
    "id": "phase4-1",
    "content": "Phase 4.1: Add MutationPathKind::PartiallyMutable variant for mixed tuple mutability (DESIGN-001)",
    "status": "pending",
    "priority": "high",
    "notes": "Add new enum variant to handle tuples with mixed mutable/immutable elements"
  },
  {
    "id": "phase4-2",
    "content": "Phase 4.2: Update build_tuple_element_path with inline mutability checking",
    "status": "pending",
    "priority": "high",
    "notes": "Replace type_supports_mutation call with inline checking logic in tuple element building"
  },
  {
    "id": "phase4-3",
    "content": "Phase 4.3: Implement propagate_tuple_mixed_mutability function for partial tuple handling",
    "status": "pending",
    "priority": "high",
    "notes": "Implement function to handle root mutation strategy based on element composition"
  },
  {
    "id": "phase4-4",
    "content": "Phase 4.4: Run cargo build && cargo +nightly fmt and fix errors following warning rules",
    "status": "pending",
    "priority": "high",
    "notes": "Build and format after tuple mutability updates"
  },
  {
    "id": "clippy-check-1",
    "content": "Run cargo clippy --workspace --all-targets --all-features -- -D warnings",
    "status": "pending",
    "priority": "medium",
    "notes": "Check for linting issues after core implementation"
  },
  {
    "id": "clippy-fix-1",
    "content": "Fix all clippy issues following warning rules",
    "status": "pending",
    "priority": "medium",
    "notes": "Address any clippy warnings without adding #[allow] annotations"
  },
  {
    "id": "type-system-1",
    "content": "TYPE-SYSTEM-001: Replace boolean mutation checks with MutationResult enum",
    "status": "pending",
    "priority": "high",
    "notes": "Add MutationResult enum and update TypeKind::build_paths to use structured error handling"
  },
  {
    "id": "type-system-2",
    "content": "TYPE-SYSTEM-001: Update TypeInfo::from_schema to use MutationResult directly",
    "status": "pending",
    "priority": "high",
    "notes": "Remove from_paths fallback and use MutationResult for precise error context"
  },
  {
    "id": "build-format-final",
    "content": "Run cargo build && cargo +nightly fmt and fix errors following warning rules",
    "status": "pending",
    "priority": "high",
    "notes": "Final build and format after TYPE-SYSTEM-001 implementation"
  },
  {
    "id": "clippy-check-2",
    "content": "Run cargo clippy --workspace --all-targets --all-features -- -D warnings",
    "status": "pending",
    "priority": "medium",
    "notes": "Final clippy check before testing"
  },
  {
    "id": "clippy-fix-2",
    "content": "Fix all clippy issues following warning rules",
    "status": "pending",
    "priority": "medium",
    "notes": "Address any remaining clippy warnings"
  },
  {
    "id": "test-run",
    "content": "Run cargo nextest run",
    "status": "pending",
    "priority": "high",
    "notes": "Execute full test suite to verify implementation correctness"
  },
  {
    "id": "test-review",
    "content": "STOP if test failures - review with user",
    "status": "pending",
    "priority": "high",
    "notes": "Check test results and halt if any failures require user review"
  }
]